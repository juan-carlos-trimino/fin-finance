# Configure Traefik static configuration
# For a comprehensive sample file, go to:
# https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
#
# Default values for Traefik
#
# Enable Access logs.
# accessLog:
#   filters:
#     statusCodes:
#       - "200"
#       - "400-599"
#     # Keep the access logs when at least one retry has happened.
#     retryAttempts: true
#     # Keep access logs when requests take longer than the specified duration.
#     minDuration: "10ms"
# Enable api.
# For a list of API enpoints, go to https://doc.traefik.io/traefik/operations/api/#endpoints.
api:
  # Activate dashboard.
  # With Dashboard enabled, the router rule must catch requests for both /api and /dashboard.
  dashboard: true
  insecure: false
# Create HorizontalPodAutoscaler object.
autoscaling:
  enabled: false
#
certificatesResolvers:
  # Let's Encrypt.
  le:
    # Enable ACME.
    acme:
      # The email address that is used for registration will be set in the section acme in
      # ./modules/traefik/cert-manager/acme-issuer.
      # email address used for registration.
      # email: 'someone@trimino.xyz'
      # The CA server. The staging environment (default) will not issue trusted certificates, but
      # it is used to ensure that the verification process is working properly before moving to
      # production. The production environment imposes much stricter rate limits; hence, to reduce
      # the chance of you hitting those limits, it is highly recommended to start by using the
      # staging environment.
      # Production.
      # caServer: https://acme-v02.api.letsencrypt.org/directory
      # Staging.
      caServer: https://acme-staging-v02.api.letsencrypt.org/directory
      # Match the path to persistence.
      storage: '/traefik-certs/acme.json'
      # Certificates' duration in hours.
      # Let's Encrypt certificates' duration defaults to 2160 hours (90 days).
      certificatesDuration: 2160
      # Preferred chain to use.
      # If the CA offers multiple certificate chains, prefer the chain with an issuer matching this
      # Subject Common Name. If no match, the default offered chain will be used.
      preferredChain: 'ISRG Root X1'
      # KeyType to use.
      # Available values: "EC256", "EC384", "RSA2048", "RSA4096", "RSA8192"
      keyType: 'RSA4096'
      dnsChallenge:
        provider: digitalocean
        # By default, the provider will verify the TXT DNS challenge record before letting ACME
        # verify. If delayBeforeCheck is greater than zero, this check is delayed for the
        # configured duration in seconds. Useful if internal networks block external DNS queries.
        delayBeforeCheck: 0
        # The DNS servers use to resolve hostnames to IP addresses.
        resolvers:
          - '1.1.1.1:53'  # Cloudflare DNS (https://1.1.1.1/dns/)
          - '1.0.0.1:53'
          - '8.8.8.8:53'  # Google DNS (https://developers.google.com/speed/public-dns/)
          - '8.8.4.4:53'
          - '9.9.9.9:53'  # Quad9 DNS (https://www.quad9.net/)
          - '149.112.112.112:53'
          - '208.67.222.222:53' # OpenDNS (https://www.opendns.com/)
          - '208.67.220.220:53'
          - '76.76.2.0:53'  # Control D (https://controld.com/free-dns)
          - '76.76.10.0:53'
# Configure the deployment
deployment:
  # Enable deployment.
  enabled: true
  # Deployment or DaemonSet.
  kind: Deployment
  # Number of pods of the deployment (only applies when kind: Deployment).
  replicas: 1
  # initContainers:
  #   # The "volume-permissions" init container is required if you run into permission issues.
  #   # Related issue: https://github.com/containous/traefik/issues/6972
  #   - name: volume-permissions
  #     image: busybox:latest
  #     command: ["sh", "-c", "chmod -Rv 600 /traefik-certs/*"]
  #     volumeMounts:
  #       - name: traefik-certs
  #         mountPath: /traefik-certs
  # Amount of time (in seconds) before Kubernetes will send the SIGKILL signal if Traefik does not
  # shut down.
  terminationGracePeriodSeconds: 60
  # The minimum number of seconds Traefik needs to be up and running before the
  # DaemonSet/Deployment controller considers it available.
  minReadySeconds: 0
  # Use process namespace sharing.
  shareProcessNamespace: false
#
entryPoints:
  # Traefik will listen to incoming request on port 80 (http).
  web:
    address: ':80'
    # Targeted entry point of the redirection.
    http:
      redirections:
        entrypoint:
          to: websecure
          # Scheme used for the redirection.
          scheme: https
          # Apply a permanent redirection.
          permanent: true
  # Traefik will listen to incoming request on port 443 (https).
  websecure:
    address: ':443'
    http:
      # Default TLS configuration for the routers linked to the entry point.
      tls:
        # Default certificate resolver for the routers linked to the entry point.
        certResolver: le
# Environment variables to be passed to Traefik's binary.
env: [
  {
    name: DO_AUTH_TOKEN,
    valueFrom: {
      secretKeyRef: {
        name: fin-traefik-provider-secret,
        key: api_auth_token
      }
    }
  }
]
# If hostNetwork is true, run traefik in the host network namespace
# To prevent unschedulabel pods due to port collisions, if hostNetwork=true and replicas>1, a pod
# anti-affinity is recommended and will be set if the affinity is left as default.
hostNetwork: false
image:
  # Traefik image host registry.
  registry: docker.io
  # Traefik image repository.
  repository: traefik
  # tag: ""
  pullPolicy: IfNotPresent
# Use ingressClass. Ignored if Traefik version < 2.3 / kubernetes < 1.18.x
# Set Traefik as the default Ingress Controller (as per Kubernetes 1.19+ changes).
ingressClass:
  enabled: true
  isDefaultClass: true
# Create an IngressRoute for the dashboard.
ingressRoute:
  dashboard:
    # Using a custom ingressRoute with basic auth instead of the default.
    enabled: false
    # Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class).
    annotations: {}
    # Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels).
    labels: {}
# Liveness and readiness probes.
livenessProbe:
  # How long to wait after the container starts before beginning the probe.
  initialDelaySeconds: 5
  # The frequency of the checks.
  periodSeconds: 10
  # How long to wait for the probe to finish. If this time is exceeded, then K8s assumes that the
  # probe failed.
  timeoutSeconds: 2
  # The minimum consecutive successes for the probe to be considered successful after it has
  # failed.
  successThreshold: 1
  # The minimum consecutive failures for the probe to be considered failed after it has succeeded.
  failureThreshold: 3
# Logs
logs:
  access:
    # To enable access logs.
    enabled: true
    # By default, logs are written using the Common Log Format (CLF).
    # To write logs in JSON, use json in the format option.
    # If the given format is unsupported, the default (CLF) is used instead.
    format: json
    filters:
      statuscodes: "200,400-599"
      # Keep the access logs when at least one retry has happened.
      retryattempts: true
      # Keep access logs when requests take longer than the specified duration.
      minduration: "10ms"
  general:
    # By default, the logs use a text format (common), but you can also ask for the json format in
    # the format option
    format: json
    # By default, the level is set to ERROR. Alternative logging levels are DEBUG, PANIC, FATAL,
    # ERROR, WARN, and INFO.
    # level: ERROR
    level: DEBUG
#
# metrics:
#   prometheus:
#     # Prometheus metrics buckets have been enabled for the different time series in seconds.
#     buckets:
#       - 0.1
#       - 0.3
#       - 1.2
#       - 5.0
#       - 10.0
# Persistent Storage.
persistence:
  enabled: true
  name: traefik-certs
  accessMode: ReadWriteOnce
  size: 1Gi
  # The path property matches the value used in the certificatesResolvers.le.acme.storage property.
  path: /traefik-certs
  annotations: {}
# Enable Healthcheck.
ping: {}
# Pod disruption budget
podDisruptionBudget:
  enabled: false
podSecurityContext:
  fsGroup: 1234
# Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBinding or
# ClusterRoleBinding.
podSecurityPolicy:
  enabled: false
# Configure ports
ports:
  traefik:
    port: 9000
    # DO NOT expose the traefik port on production deployments. To access it from outside of the
    # cluster, use `kubectl port-forward` or create a secure ingress.
    # $ kubectl port-forward -n finances $(kubectl get pods -n finances --selector "app.kubernetes.io/name=traefik" --output=name) 9000:9000
    # From a browser, use http://127.0.0.1:9000/dashboard/ to see the Traefik dashboard; the
    # trailing slash / in /dashboard/ is mandatory.
    expose:
      default: false
    # The exposed port for this service.
    exposedPort: 9000
    protocol: TCP
  web:
    port: 8080  # Traefik port.
    expose:
      default: true
    exposedPort: 80
    # (Optional) Permanent Redirect to HTTPS.
    redirections:
      entryPoint: {
        to: websecure,
        scheme: https,
        permanent: true,
        # Priority of the generated router.
        priority: 10
      }
    protocol: TCP
  websecure:
    port: 8443
    expose:
      default: true
    exposedPort: 443
    protocol: TCP
    tls:
      enabled: true
      # (Optional) Set a default certificate resolver.
      certResolver: le
  metrics:
    port: 9100
    expose:
      default: false
    # The exposed port for this service.
    exposedPort: 9100
    protocol: TCP
# Configure providers.
providers:
  # Enable Kubernetes backend with default settings.
  kubernetesCRD:
    # Load Kubernetes IngressRoute provider.
    enabled: true
  # Enable Kubernetes backend with default settings.
  kubernetesIngress:
    # Load Kubernetes Ingress provider.
    enabled: true
    # Value of kubernetes.io/ingress.class annotation or IngressClass name to watch for. See
    # https://cert-manager.io/docs/installation/upgrading/ingress-class-compatibility/#traefik.
    ingressClass: traefik
#
readinessProbe:
  # The number of seconds to wait before starting the first probe.
  initialDelaySeconds: 3
  # The number of seconds to wait between consecutive probes.
  periodSeconds: 10
  # The number of seconds to wait for a probe response before considering it as failed.
  timeoutSeconds: 2
  # The minimum consecutive successes required to consider the probe successful.
  successThreshold: 1
  # The number of consecutive failures allowed before considering the probe as failed.
  failureThreshold: 1
# Whether Role Based Access Control objects like roles and rolebindings should be created.
rbac:
  enabled: true
  # If set to false, installs ClusterRole and ClusterRoleBinding so Traefik can be used across
  # namespaces.
  # If set to true, installs namespace-specific Role and RoleBinding and requires provider
  # configuration be set to that same namespace.
  namespaced: true
# QoS (Guaranteed).
resources:
  # requests:
  #   cpu: "500m"
  #   memory: "150Mi"
  limits:
    cpu: "500m"
    memory: "500Mi"
#
rollingUpdate:
  maxUnavailable: 1
  maxSurge: 1
# Set the container security context.
# To run the container with ports below 1024 this will need to be adjust to run as root.
securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  runAsGroup: 1234
  runAsNonRoot: true
  runAsUser: 1234
# Options for the main traefik service, where the entrypoints traffic comes from.
service:
  enabled: true
  # Create two 'Service'; one for TCP and one for UDP.
  single: false
  type: LoadBalancer
  # Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific
  # config)
  annotations: {}
  # Additional annotations for TCP service only
  annotationsTCP: {}
  # Additional annotations for UDP service only
  annotationsUDP: {}
  # Additional service labels (e.g. for filtering Service by custom labels)
  labels: {
    app = "finances"
  }
  # Additional entries here will be added to the service spec.
  # Cannot contain type, selector or ports entries.
  spec: {}
  loadBalancerSourceRanges: []
  externalIPs: []
# The service account the pods will use to interact with the Kubernetes API.
serviceAccount:
  # If set, an existing service account is used.
  # If not set, a service account is created automatically using the fullname template.
  # name: ""
  name: "fin-traefik-service-account"
