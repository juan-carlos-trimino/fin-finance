{
  //Enable/disable navigation breadcrumbs.
  "breadcrumbs.enabled": true,
  //Controls whether and how file paths are shown in the breadcrumbs view.
  // on: Shows the file path in the breadcrumbs view.
  // off: Do not show the file path in the breadcrumbs view.
  // last: Only shows the last element of the file path in the breadcrumbs view.
  "breadcrumbs.filePath": "on",
  //Controls the location of the debug toolbar.
  // floating: Shows debug toolbar in all views.
  // docked: Shows debug toolbar only in debug views.
  // commandCenter: `(Experimental)` Shows debug toolbar in the command center.
  // hidden: Do not show debug toolbar.
  "debug.toolBarLocation": "commandCenter",
  //When enabled, the diff editor ignores changes in leading or trailing whitespace.
  "diffEditor.ignoreTrimWhitespace": false,
  //Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to
  //avoid ambiguity between inserting new lines or accepting suggestions.
  // on
  // smart: Only accept a suggestion with `Enter` when it makes a textual change.
  // off
  "editor.acceptSuggestionOnEnter": "off", //Press Tab to accept suggestion.
  //Controls whether bracket pair colorization is enabled or not. Use
  //`workbench.colorCustomizations` to override the bracket highlight colors.
  "editor.bracketPairColorization.enabled": true,
  //Controls the cursor animation style.
  "editor.cursorBlinking": "phase",
  //Controls whether the smooth caret animation should be enabled.
  // off: Smooth caret animation is disabled.
  // explicit: Smooth caret animation is enabled only when the user moves the cursor with an
  //           explicit gesture.
  // on: Smooth caret animation is always enabled.
  "editor.cursorSmoothCaretAnimation": "on",
  //Controls the cursor style.
  "editor.cursorStyle": "block",
  //Controls whether `editor.tabSize` and `editor.insertSpaces` will be automatically detected when
  //a file is opened based on the file contents.
  "editor.detectIndentation": false,
  //Controls the condition for turning on `Find in Selection` automatically.
  // never: Never turn on `Find in Selection` automatically (default).
  // always: Always turn on `Find in Selection` automatically.
  // multiline: Turns on `Find in Selection` automatically when multiple lines of content are
  //            selected.
  "editor.find.autoFindInSelection": "multiline",
  //Controls the font family.
  "editor.fontFamily": "'Fira Code', Consolas, 'Courier New', monospace",
  //Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures
  //or a string for the value of the CSS 'font-feature-settings' property.
  "editor.fontLigatures": true,
  //Controls the font size in pixels.
  "editor.fontSize": 16,
  //Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
  "editor.fontWeight": "normal",
  //Formats a file on save. A formatter must be available and the editor must not be shutting down.
  //When `files.autoSave` is set to `afterDelay`, the file will only be formatted when saved
  //explicitly.
  "editor.formatOnSave": false,
  //Controls whether horizontal bracket pair guides are enabled or not.
  // true: Enables horizontal guides as addition to vertical bracket pair guides.
  // active: Enables horizontal guides only for the active bracket pair.
  // false: Disables horizontal bracket pair guides.
  "editor.guides.bracketPairs": "active",
  //Controls whether the hover is shown.
  "editor.hover.enabled": true,
  //The number of spaces used for indentation or `"tabSize"` (use the value from `editor.tabSize`).
  //This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.indentSize": "tabSize",
  //Inserts spaces when pressing `Tab`. This setting is overridden based on the file contents when
  //`editor.detectIndentation` is on.
  "editor.insertSpaces": true,
  //Controls the display of line numbers.
  // off: Line numbers are not rendered.
  // on: Line numbers are rendered as absolute number.
  // relative: Line numbers are rendered as distance in lines to cursor position.
  // interval: Line numbers are rendered every 10 lines.
  "editor.lineNumbers": "on",
  //Controls whether the minimap is shown.
  "editor.minimap.enabled": true,
  //Limits the width of the minimap to render at most a certain number of columns.
  "editor.minimap.maxColumn": 200,
  //Renders the actual characters on a line as opposed to color blocks.
  "editor.minimap.renderCharacters": false,
  //Controls when the minimap slider is shown.
  "editor.minimap.showSlider": "always",
  //Controls the side where to render the minimap.
  "editor.minimap.size": "fill",
  //Zooms the font of the editor when using mouse wheel and holding `Ctrl`.
  "editor.mouseWheelZoom": true,
  //The modifier to be used to add multiple cursors with the mouse. The `Go to Definition` and
  //`Open Link` mouse gestures will adapt such that they do not conflict with the multicursor
  //modifier.
  // ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
  // alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
  "editor.multiCursorModifier": "ctrlCmd",
  //Controls how the editor should render whitespace characters.
  // none
  // boundary: Render whitespace characters except for single spaces between words.
  // selection: Render whitespace characters only on selected text.
  // trailing: Render only trailing whitespace characters.
  // all
  "editor.renderWhitespace": "all",
  //Controls whether the editor will scroll using an animation.
  "editor.smoothScrolling": true,
  //Shows the nested current scopes during the scroll at the top of the editor.
  "editor.stickyScroll.enabled": true,
  //The number of spaces a tab is equal to. This setting is overridden based on the file contents
  //when `editor.detectIndentation` is on.
  "editor.tabSize": 2,
  //Controls how lines should wrap.
  // off: Lines will never wrap.
  // on: Lines will wrap at the viewport width.
  // wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
  // bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
  "editor.wordWrap": "on",
  //Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or
  //`bounded`.
  "editor.wordWrapColumn": 100,
  //Controls whether the Explorer should automatically reveal and select files when opening them.
  // true: Files will be revealed and selected.
  // false: Files will not be revealed and selected.
  // focusNoScroll: Files will not be scrolled into view, but will still be focused.
  "explorer.autoReveal": false,
  //Controls whether the Explorer should render folders in a compact form. In such a form, single
  //child folders will be compressed in a combined tree element. Useful for Java package
  //structures, for example.
  "explorer.compactFolders": false,
  //Controls whether the Explorer should ask for confirmation when deleting a file via the trash.
  "explorer.confirmDelete": true,
  //The initial maximum number of editors shown in the Open Editors pane.
  "explorer.openEditors.visible": 9,
  //Controls auto save of editors that have unsaved changes.
  // off: An editor with changes is never automatically saved.
  // afterDelay: An editor with changes is automatically saved after the configured
  //             `files.autoSaveDelay`.
  // onFocusChange: An editor with changes is automatically saved when the editor loses focus.
  // onWindowChange: An editor with changes is automatically saved when the window loses focus.
  "files.autoSave": "afterDelay",
  //Controls the delay in milliseconds after which an editor with unsaved changes is saved
  //automatically. Only applies when `files.autoSave` is set to `afterDelay`.
  "files.autoSaveDelay": 3000, //5 seconds.
  //The default language identifier that is assigned to new files. If configured to
  //`${activeEditorLanguage}`, will use the language identifier of the currently active text
  //editor, if any.
  "files.defaultLanguage": "go",
  //The default character set encoding to use when reading and writing files. This setting can also
  //be configured per language.
  "files.encoding": "utf8",
  //The default end of line character.
  // \n: LF
  // \r\n: CRLF
  // auto: Uses operating system specific end of line character.
  "files.eol": "\n",
  //When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": true,
  //When enabled, will trim all new lines after the final new line at the end of the file when
  //saving it.
  "files.trimFinalNewlines": true,
  //When enabled, will trim trailing whitespace when saving a file.
  "files.trimTrailingWhitespace": true,
  //When set to true, commits will automatically be fetched from the default remote of the current
  //Git repository. Setting to `all` will fetch from all remotes.
  "git.autofetch": false,
  //Stashes any changes before pulling and restore them after successful pull.
  "git.autoStash": false,
  //Commits all changes when there are no staged changes.
  "git.enableSmartCommit": false,
  //Opens the merge editor for files that are currently under conflict.
  "git.mergeEditor": false,
  //Suggests to enable smart commit (commit all changes when there are no staged changes).
  "git.suggestSmartCommit": false,
  //Controls if Markdown links are created when URLs are pasted into a Markdown editor. Requires
  //enabling `editor.pasteAs.enabled`.
  // always: Always insert Markdown links.
  // smart: Smartly create Markdown links by default when not pasting into a code block or other
  //        special element. Use the paste widget to switch between pasting as plain text or as
  //        Markdown links.
  // smartWithSelection: Smartly create Markdown links by default when you have selected text and
  //                     are not pasting into a code block or other special element. Use the paste
  //                     widget to switch between pasting as plain text or as Markdown links.
  // never: Never create Markdown links.
  "markdown.editor.pasteUrlAsFormattedLink.enabled": "smart",
  //Enables all error reporting in Markdown files.
  "markdown.validate.enabled": false,
  //Controls whether text selected in the terminal will be copied to the clipboard.
  "terminal.integrated.copyOnSelection": true,
  //Controls whether the terminal cursor blinks.
  "terminal.integrated.cursorBlinking": true,
  //Controls the style of terminal cursor when the terminal is focused.
  "terminal.integrated.cursorStyle": "block",
  //The default terminal profile on Linux.
  "terminal.integrated.defaultProfile.linux": null,
  //The default terminal profile on macOS.
  "terminal.integrated.defaultProfile.osx": null,
  //The default terminal profile on Windows.
  // null: Automatically detect the default
  // PowerShell: $(terminal-powershell) PowerShell
  //  path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
  // Windows PowerShell: $(terminal-powershell) Windows PowerShell
  //  path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
  // Git Bash: $(terminal) Git Bash
  //  path: C:\Program Files\Git\bin\bash.exe
  //  args: ['--login','-i']
  // Command Prompt: $(terminal-cmd) Command Prompt
  //  path: C:\WINDOWS\System32\cmd.exe
  //  args: []
  // Ubuntu-22.04 (WSL): $(terminal-ubuntu) Ubuntu-22.04 (WSL)
  //  path: C:\WINDOWS\System32\wsl.exe
  //  args: ['-d','Ubuntu-22.04']
  // JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
  //  extensionIdentifier: ms-vscode.js-debug
  "terminal.integrated.defaultProfile.windows": "Git Bash",
  //Controls whether the visual terminal bell is enabled. This shows up next to the terminal's name.
  "terminal.integrated.enableVisualBell": false,
  //Controls the font family of the terminal. Defaults to `editor.fontFamily`'s value.
  "terminal.integrated.fontFamily": "Consolas, 'Courier New', monospace",
  //Controls the font size in pixels of the terminal.
  "terminal.integrated.fontSize": 16,
  //The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold"
  //keywords or numbers between 1 and 1000.
  "terminal.integrated.fontWeight": "normal",
  //The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords
  //or numbers between 1 and 1000.
  "terminal.integrated.fontWeightBold": "bold",
  //Controls the maximum number of lines the terminal keeps in its buffer (scrollback).
  "terminal.integrated.scrollback": 10000,
  //The number of cells in a tab stop.
  "terminal.integrated.tabStopWidth": 2,
  //Controls the height of editor tabs. Also applies to the title control bar when
  //`workbench.editor.showTabs` is not set to `multiple`.
  "window.density.editorTabHeight": "default",
  //Controls the window title based on the current context such as the opened workspace or active
  //editor.
  "window.title": "${dirty} ${activeEditorLong} ${separator} ${remoteName}",
  //Controls the location of the Activity Bar relative to the Primary and Secondary Side Bars.
  // default: Show the Activity Bar on the side of the Primary Side Bar and on top of the Secondary
  //          Side Bar.
  // top: Show the Activity Bar on top of the Primary and Secondary Side Bars.
  // bottom: Show the Activity Bar at the bottom of the Primary and Secondary Side Bars.
  // hidden: Hide the Activity Bar in the Primary and Secondary Side Bars.
  "workbench.activityBar.location": "default",
  //Overrides colors from the currently selected color theme.
  "workbench.colorCustomizations": {
    "editorLineNumber.activeForeground": "#f3f0f0",
    "editor.lineHighlightBackground": "#3c3c3c",
    "tab.activeBackground": "#0c0c0c",
    "tab.activeBorder": "#39739d",
    "tab.activeForeground": "#fff",
    "tab.border": "#39739d",
    "tab.hoverBackground": "#333e36",
    "titleBar.activeBackground": "#0c0c0c",
    "titleBar.activeForeground": "#ffffff",
    "titleBar.border": "#39739d",
    "titleBar.inactiveBackground": "#ffffff",
    "titleBar.inactiveForeground": "#0c0c0c",
    "tree.indentGuidesStroke": "#999999"
  },
  //Specifies the color theme used in the workbench.
  "workbench.colorTheme": "Visual Studio Dark",
  //Controls whether editor file decorations should use colors.
  "workbench.editor.decorations.colors": true,
  //Controls whether opened editors show as preview editors. Preview editors do not stay open, are
  //reused until explicitly set to be kept open (via double-click or editing), and show file names
  //in italics.
  "workbench.editor.enablePreview": false,
  //Controls where editors open. Select `left` or `right` to open editors to the left or right of
  //the currently active one. Select `first` or `last` to open editors independently from the
  //currently active one.
  "workbench.editor.openPositioning": "right",
  //Controls the default direction of editors that are opened side by side (for example, from the
  //Explorer). By default, editors will open on the right hand side of the currently active one. If
  //changed to `down`, the editors will open below the currently active one.
  "workbench.editor.openSideBySideDirection": "down",
  //Controls the size of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened
  //tabs and typically do not close until unpinned. This value is ignored when
  //`workbench.editor.showTabs` is not set to `multiple`.
  // normal: A pinned tab inherits the look of non pinned tabs.
  // compact: A pinned tab will show in a compact form with only icon or first letter of the editor
  //          name.
  // shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
  "workbench.editor.pinnedTabSizing": "shrink",
  //When enabled, displays pinned tabs in a separate row above all other tabs. This value is
  //ignored when `workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.pinnedTabsOnSeparateRow": true,
  //Controls whether opened editors should show as individual tabs, one single large tab or if the
  //title area should not be shown.
  // multiple: Each editor is displayed as a tab in the editor title area.
  // single: The active editor is displayed as a single large tab in the editor title area.
  // none: The editor title area is not displayed.
  "workbench.editor.showTabs":"multiple",
  //Controls whether tabs should be wrapped over multiple lines when exceeding available space or
  //whether a scrollbar should appear instead. This value is ignored when
  //`workbench.editor.showTabs` is not set to `multiple`.
  "workbench.editor.wrapTabs": true,
  //Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
  // null: No file icons
  // vs-minimal
  // vs-seti
  "workbench.iconTheme": "vs-minimal",
  //Controls the location of the primary side bar and activity bar. They can either show on the
  //left or right of the workbench. The secondary side bar will show on the opposite side of the
  //workbench.
  "workbench.sideBar.location": "right",
  //Controls which editor is shown at startup, if none are restored from the previous session.
  // none: Start without an editor.
  // welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and
  //              extensions.
  // readme: Open the README when opening a folder that contains one, fallback to 'welcomePage'
  //         otherwise.
  //         Note: This is only observed as a global configuration, it will be ignored if set in a
  //               workspace or folder configuration.
  // newUntitledFile: Open a new untitled text file (only applies when opening an empty window).
  // welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
  // terminal: Open a new terminal in the editor area.
  "workbench.startupEditor": "welcomePageInEmptyWorkbench",
  //Controls the visibility of the status bar at the bottom of the workbench.
  "workbench.statusBar.visible": true,
  //Controls whether sticky scrolling is enabled in trees.
  "workbench.tree.enableStickyScroll": true,
  //Controls tree indentation in pixels.
  "workbench.tree.indent": 10,
  //Controls whether the tree should render indent guides.
  "workbench.tree.renderIndentGuides": "always",
  //Configures settings to be overridden for the go language.
  "[go]": {
    "editor.defaultFormatter": "golang.go",
    /***
    Gopls forces tab indentations on import sections when saving files. See
    https://github.com/golang/vscode-go/issues/3044
    https://github.com/golang/vscode-go/blob/master/docs/advanced.md#formatting-code-and-organizing-imports
    https://go-proverbs.github.io/ (See "Gofmt's style is no one's favorite, yet gofmt is
     everyone's favorite.")
    To force gopls not to format imports on save, use the following settings:
    ***/
    "editor.formatOnSave": false,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "never"
    }
  },
  //Configures settings to be overridden for the json language.
  "[json]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },
  //Configures settings to be overridden for the markdown language.
  "[markdown]": {
    "editor.unicodeHighlight.invisibleCharacters": true
  },
  //Configures settings to be overridden for the plaintext language.
  "[plaintext]": {
    "editor.unicodeHighlight.invisibleCharacters": true
  }
}
